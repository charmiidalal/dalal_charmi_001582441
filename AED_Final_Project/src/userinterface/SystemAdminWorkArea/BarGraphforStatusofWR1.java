/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Property.Property;
import Business.Property.PropertyDirectory;
import Business.UserAccount.UserAccount;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Charmi
 */
public class BarGraphforStatusofWR1 extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem system;
    JFreeChart barChart;
    private final PropertyDirectory propertyDirectory;

    /**
     * Creates new form ViewScenesGraph
     *
     * @param userProcessContainer
     * @param system
     */
    public BarGraphforStatusofWR1(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.propertyDirectory = (system.getPropertyDirectory() == null) ? new PropertyDirectory() : system.getPropertyDirectory();
        populateBarGraph();
    }

    public void populateBarGraph() {
        barChart = ChartFactory.createBarChart(
                "Sample",
                "Status",
                "Work Request Count",
                createDataset(),
                PlotOrientation.VERTICAL,
                true, true, false);

        ChartPanel chartPanel = new ChartPanel(barChart);
        jPanel1.removeAll();
        jPanel1.add(chartPanel, BorderLayout.CENTER);
        jPanel1.validate();
    }

    private CategoryDataset createDataset() {
        final DefaultCategoryDataset dataset
                = new DefaultCategoryDataset();
        int soldHouses = 0, vacantHoused = 0;
        DefaultPieDataset result = new DefaultPieDataset();
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.Property) {
                    for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (o.getType() == Organization.Type.Seller) {
                            for (UserAccount ua : o.getUserAccountDirectory().getUserAccountList()) {
                                for (Property property : propertyDirectory.getPropertyList()) {
                                    if (property.getSeller().getUsername().equals(ua.getUsername())) {
                                        if ("sold".equals(property.getStatus().toLowerCase())) {
                                            soldHouses++;
                                        } else {
                                            vacantHoused++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            dataset.addValue(soldHouses, network.getName(), "Sold");
            dataset.addValue(vacantHoused, network.getName(), "Vacant");
            soldHouses = 0;
            vacantHoused = 0;
        }
        return dataset;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(241, 241, 242));
        setPreferredSize(new java.awt.Dimension(1058, 840));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.BorderLayout());
        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 860, 600));

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(25, 56, 82));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("HOUSE SELLANALYSIS PER NETWORK");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 594, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_new/bar-chart-big.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
